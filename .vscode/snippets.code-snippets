{
   // Place your dev-template workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
   // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
   // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
   // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
   // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
   // Placeholders with the same ids are connected.
   // Example:
   // "Print to console": {
   // 	"scope": "javascript,typescript",
   // 	"prefix": "log",
   // 	"body": [
   // 		"console.log('$1');",
   // 		"$2"
   // 	],
   // 	"description": "Log output to console"
   // }
   "New formatted file": {
      "prefix": "fmt",
      "body": ["/** @format */", "", ""],
      "description": "Fills the prettify comment."
   },
   "New test file": {
      "scope": "typescript",
      "prefix": "tapes",
      "body": [
         "/** @format */",
         "",
         "import test from 'tape';",
         "",
         "// eslint-disable-next-line no-console",
         "console.log('\\x1b[33mStarting tests: $1\\x1b[0m');",
         "",
         "test('$2', (assert) => {",
         "  assert$3",
         "  assert.end();",
         "});"
      ],
      "description": "Prepares the test file."
   },
   "New test method": {
      "scope": "typescript",
      "prefix": "tape",
      "body": ["test('$1', (assert) => {", "  assert$2", "  assert.end();", "});"],
      "description": "Prepares a new method."
   },
   "New localized string": {
      "prefix": "lcl",
      "body": ["t`$1`"],
      "description": "Inserts localized string"
   },
   "New react component": {
      "prefix": "newcomp",
      "body": [
         "import * as React from 'react';",
         "import { observer } from 'mobx-react';",
         "import { Html$2Props } from '../types';",
         "",
         "export interface $1Props extends Html$2Props {",
         "}",
         "",
         "const $1 = observer(({children, ...props}: React.PropsWithChildren<$1Props>) => {",
         "   return (",
         "      <$3 {...props}>",
         "         $4",
         "      </$3>",
         "   );",
         "});",
         "",
         "export default $1;"
      ],
      "description": "Init a component with styles and properties."
   },
   "New useStyles": {
      "prefix": "usesty",
      "body": ["const useStyles = makeStyles(() => ({", "   $1", "}));"],
      "description": "Creates useStyles for using in functional component (const styles = useStyles())."
   }
}
